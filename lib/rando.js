// Generated by CoffeeScript 1.10.0
(function() {
  var ADJECTIVE, CONJUNCTION, NOUN, NUM_PATTERNS, PATTERN_MAP, Rando, VERB, createGenerator;

  ADJECTIVE = "adjective";

  NOUN = "noun";

  VERB = "verb";

  CONJUNCTION = "conjunction";

  PATTERN_MAP = [[ADJECTIVE, NOUN, NOUN], [ADJECTIVE, ADJECTIVE, NOUN], [VERB, CONJUNCTION, ADJECTIVE, NOUN], [ADJECTIVE, ADJECTIVE, NOUN, NOUN]];

  NUM_PATTERNS = 4;

  Rando = (function() {
    var VOWELS;

    function Rando() {}

    VOWELS = ["A", "E", "I", "O", "U"];

    Rando.prototype.randomSprintName = function(bank, pattern) {
      var chosenPattern, currentIndex, currentWordIndex, generatedPattern, i, lastWord, len, randomWord, sprintName, type, usedWords, wordList;
      sprintName = [];
      usedWords = {
        "adjective": [],
        "verb": [],
        "noun": [],
        "conjunction": []
      };
      generatedPattern = pattern != null ? this._generatePattern(pattern) : [];
      chosenPattern = generatedPattern.length > 0 ? generatedPattern : this._randomPattern();
      for (currentWordIndex = i = 0, len = chosenPattern.length; i < len; currentWordIndex = ++i) {
        type = chosenPattern[currentWordIndex];
        randomWord = "";
        currentIndex = -1;
        wordList = (function() {
          switch (type) {
            case ADJECTIVE:
              return bank.adjectives;
            case NOUN:
              return bank.nouns;
            case VERB:
              return bank.verbs;
            case CONJUNCTION:
              return bank.conjunctions;
          }
        })();
        while (currentIndex < 0 || usedWords[type].indexOf(currentIndex) > -1) {
          currentIndex = this._randomIndex(wordList);
        }
        usedWords[type].push(currentIndex);
        randomWord = this._randomWord(wordList, currentIndex);
        if (currentWordIndex === 0) {
          randomWord = this._capitalizeFirstLetter(randomWord);
        }
        lastWord = sprintName[sprintName.length - 1];
        if ((lastWord != null) && lastWord.toLowerCase() === "a" && this._startsWithAVowel(randomWord)) {
          sprintName.push("n");
        }
        if (currentWordIndex !== 0) {
          sprintName.push(" ");
        }
        sprintName.push(randomWord);
      }
      return sprintName.join("");
    };

    Rando.prototype._generatePattern = function(pattern) {
      var generatedPattern, i, len, letter, type, uppercasePattern;
      uppercasePattern = pattern.toUpperCase();
      generatedPattern = [];
      for (i = 0, len = uppercasePattern.length; i < len; i++) {
        letter = uppercasePattern[i];
        type = (function() {
          switch (letter) {
            case "A":
              return ADJECTIVE;
            case "N":
              return NOUN;
            case "V":
              return VERB;
            case "C":
              return CONJUNCTION;
          }
        })();
        if (type != null) {
          generatedPattern.push(type);
        }
      }
      console.log("Got pattern: ", generatedPattern);
      return generatedPattern;
    };

    Rando.prototype._randomPattern = function() {
      var randomInt;
      randomInt = this._randomInt(0, NUM_PATTERNS - 1);
      return PATTERN_MAP[randomInt];
    };

    Rando.prototype._randomInt = function(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    };

    Rando.prototype._randomIndex = function(wordList) {
      return this._randomInt(0, wordList.length - 1);
    };

    Rando.prototype._randomWord = function(wordList, index) {
      var choiceList;
      choiceList = wordList[index];
      return choiceList[this._randomInt(0, choiceList.length - 1)];
    };

    Rando.prototype._capitalizeFirstLetter = function(word) {
      return word.charAt(0).toUpperCase() + word.slice(1);
    };

    Rando.prototype._startsWithAVowel = function(word) {
      var firstCharacter;
      firstCharacter = word.charAt(0);
      return ["A", "E", "I", "O", "U"].indexOf(firstCharacter) > -1;
    };

    return Rando;

  })();

  createGenerator = function() {
    return new Rando();
  };

  module.exports = createGenerator;

}).call(this);
